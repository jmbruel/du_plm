== Le Diagramme de Séquence

ifdef::slides[:leveloffset: -1]

=== Généralités

* Modélise les interactions entre objets
* Séquencement dans le temps
* Échange de messages
* Spécifie les scénarios des cas d'études
* Éléments :
** participants
** lignes de vie
** barres d'activation
** messages
** blocs (+loop+,+alt+,+opt+,...)

ifdef::slides[<<<]

[[seq]]
.Diagramme de séquence
image:seq1.png["Diagramme de séquence",width="40%"]
image:seq2.png["Eléments de notation",width="40%"]

[WARNING]
=====================================================================
Les lignes de vie représentent des objets et non des classes
=====================================================================


=== Exemple

[[seqexp]]
.Exemple de diagramme de séquence
image:seq3.png["Exemple de diagramme de séquence",width="60%"]

=== Notions avancées

* Instructions itératives et conditionnelles
* Mieux vaut utiliser un diagramme d'activité
* Cadres d'interaction
** +loop+ (boucle)
** +alt+ (alternative)
** +opt+ (optionel)
** +par+ (parallèle)
** +region+ (région critique - un seul thread à la fois)

ifdef::slides[<<<]

[[fowler]]
.Exemple algorithme / diagramme
image:fowl1.png["Un algorithme",width="30%"]
image:fowl2.png["Sa modélisation",width="60%"]

=== Exemple de conceptions

[[fowler1]]
.Conception "centralisée"
image:fowl3.png["Conception 'centralisée'",width="60%"]

ifdef::slides[<<<]

[[fowler2]]
.Conception "objet"
image:fowl4.png["Conception 'objet'",width="60%"]

=== Diagramme de séquence système

Bien que non présent dans UML, il est courant de trouver un diagramme de séquence particulier, le
*diagramme de séquence système* ou *DSS*, où on ne représente qu'un seul objet : le système en cours de développement lui-même.

[[exp1-dss]]
.Un exemple de DSS
image:dssexp1.png["Exemple de DSS",width="40%"]

=== Lien entre UC, DSS et DS

La décomposition hiérarchique permet de réaliser une description "_TOP-DOWN_" du système à réaliser.

On fait un Diagramme de Séquence Système pour chaque UC (issu du Diagramme d’UC) pour déterminer les échanges d’informations entre l’acteur et le système.

Ensuite on fait un Diagramme de Séquence (DS) pour décrire comment les objets composants le système (issus du Diagramme de Classes) collaborent pour réaliser le traitement demandé.

ifdef::slides[<<<]

[[exp1-uc]]
.Diagramme d'UC
image:ucexp1.png["Diagramme d'UC",width="30%"]

ifdef::slides[<<<]

[[exp1-dss]]
.Le DSS correspondant
image:dssexp1.png["Le DSS correspondant",width="30%"]

ifdef::slides[<<<]

[[exp1-ds]]
.Le DS correspondant
image:dsexp1.png["Le DS correspondant",width="70%"]

ifdef::slides[:leveloffset: 0]

=== Le paradigme MVC

Le paradigme **M**odèle-**V**ue-**C**ontrôleur, ou *MVC* (de l'anglais _Model-View-Controller_) est une architecture logicielle qui divise l’application en trois éléments importants (cf. <<mvc,MVC ci-dessous>>) :

*le modèle*::
        chargé de gérer les élements d'information (comme la base de donnée)
*les vues*::
        interfaces entre l'application et l'utilisateur
*les contrôleurs*::
        chargés de faire le lien entre vues et modèle.

[[mvc]]
.Séparation des préoccupations dans le MVC
image::mvc.png["MVC",width=50%"]
