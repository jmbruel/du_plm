// ------------------------------------------
//  Created by Jean-Michel Bruel on 2014-07.
//  Copyright (c) 2014 IRIT/U. Toulouse. All rights reserved.
// ------------------------------------------
= UML et la modélisation
Jean-Michel Bruel <jbruel@gmail.com>
v.1.0, {localdate}: First draft
:showtitle:

// ------------------------------------------
include::definitions.txt[]
include::asciidoc.conf[]

ifdef::slides[]

== Suivre ces slides sur Internet...

//image::qrcode.png[link="qrcode.png",alt="http://bit.ly/jmb-duplm"]

.........
http://bit.ly/jmb-duplm
.........

endif::slides[]

// ------------------------------------------
include::preambule.asc[]
// ------------------------------------------

ifdef::slides[:leveloffset: -1]

=== Contenu, objectifs et pré-requis

ifdef::slides[]

[icon="{iconsdir}/tuxteacher.png"]
[NOTE]
====
Voyons ça ensemble!
====

endif::slides[]
ifndef::slides[]

À faire en dynamique...

endif::slides[]

=== Supports de cours et matériel

Format des cours::
  Journées (9h-12h / 14h-17h a priori)

Supports::
  Pour l'instant : http://jmbruel.heroku.com/teaching/PLM/main.html[]

Volume::
  30h (5 jours)

=== Outils, exercices et projet

Outils {UML} que nous utiliserons :

- Editeur {papyrus} : l'outil promu par l'aéronautique ({Polarsys}), Ericsson, etc.
- {plantuml} si vous êtes des geek qui aimez les notations textuelles

ifdef::slides[:leveloffset: 0]

== Première partie : modéliser (J1)

ifdef::slides[:leveloffset: -1]

=== Modéliser c'est quoi ?

ifdef::slides[]

[icon="{iconsdir}/tuxteacher.png"]
[NOTE]
====
"Dessinez-moi" le domaine d'activité de votre dernier job.
====

endif::slides[]

ifdef::slides[:leveloffset: -1]

==== Définir un langage de modélisation

ifndef::slides[.Démarche de définition d'un langage (cf. <<IDM'12>>)]
image::idm12.png[width="80%"]

==== Langages

Pour communiquer il faut un (ou plusieurs) langage(s) :

- Un modèle (M) n’est pas un langage
+
NOTE: Peut être la description d’un langage
+
- Un méta-modèle (MM) non plus

==== Langage, syntaxe, sémantique

Un langage consiste en :

- une notation syntactique
- un ensemble d’éléments légaux (combinaison, éventuellement infinie, des termes de base de la notation)
- une interprétation pour ces termes

ifdef::slides[==== Langage, syntaxe, sémantique (suite)]

Syntaxe::
  ensemble des règles de bon agencement des éléments d’une notation

Domaine sémantique::
  ensemble des interprétations possible pour la notation (« univers du discours »)

Sémantique::
  « mapping » de la syntaxe vers le domaine sémantique

ifdef::slides[]
==== À vous!

[icon="{iconsdir}/tuxteacher.png"]
[NOTE]
====
Explorons quelques exemples de la vraie vie :

. Prenez un langage au hazard (pas forcément informatique)
. Déterminez sa syntaxe concrète
. Déterminez sa syntaxe abstraite
. Déterminez sa sémantique

====

endif::slides[]

ifdef::slides[==== Langage, syntaxe, sémantique (suite)]

[NOTE]
====
Les 3 éléments de définition d’un langage ont besoin d’être représentés

=> 4ème langage parfois!

=> différentes couches (e.g., lettres, mots, phrases,…)
====

==== Syntaxe

* Exemples
**  Mots, phrases, déclarations, boîtes, schémas, termes, modules, …
* Différents types
** Graphique
**  Textuelle
**  Abstraite
**  Concrète
* Langage pour la représenter
**  Textuelle => grammaire
**  Graphique => graphes

==== Sémantique

* Opérationnelle
** suite d'états et de transitions entre ces états
* Dénotationnelle
** fonction mathématique qui fait passer d'un état (entrée de la fonction) à un autre (sortie)
* Axiomatique
** propriétés logique sur les états

==== Modèle

* Représentation d'un système
** créé dans un certain objectif
** utilisé éventuellement pour prédire ou analyser son comportement

* Description vs. Spécification
** Description => système existant
** Spécification => système attend

* Représentation => relation système/modèle

ifdef::slides[==== Modèle (suite)]

Objectifs :

* Appréhender la complexité des systèmes
* Découpler les considérations
* Formaliser les éléments intuitifs
* Dialoguer (interne à l’équipe mais aussi externe)

ifdef::slides[==== Modèle (suite)]

Différents et nombreux :

* Instants du cycle de vie
* Niveau d’abstractions
* Considérations (vues)

=> multiplicité des modèles

ifdef::slides[==== Modèle (suite)]

Exemple d’UML :

- Modèles de comportement
- Modèles des besoins
- Modèles des données
- Modèles des communications
- ...

ifdef::slides[==== Modèle (suite)]

Notation formelle pour la représentation :

=> notion de *conformité*

=> notion de *méta-modèle*

==== Méta-modèle et niveaux

ifndef::slides[.Le modèle en 4 couches (source @jeanBezivin)]
image::M4.png[]

ifdef::slides[]

==== À vous!

[icon="{iconsdir}/tuxteacher.png"]
[NOTE]
====
Placez ces termes dans le modèle M4 :

- Programmes
- Processus
- Programme
- Grammaire
- EBNF
- XML
- Donnée
- DTD
====

endif::slides[]

==== Importance de la modélisation en informatique

ifndef::slides[.Place centrale]
image::fig-placeCentrale.png[width="80%"]

include::fondements.txt[]

// ------------------------------------------
include::UML.txt[]
// ------------------------------------------

// ------------------------------------------
include::DC.txt[]
// ------------------------------------------

== Deuxième partie : les incontournables

ifdef::slides[:leveloffset: -1]

=== Les besoins clients (J2)

Nous aborderons le diagramme des UC et le diagramme de séquence système.

=== Le modèle de données (J3)

Il s'agit principalement du diagramme de classe.

=== Les diagrammes d'interaction (J4)

Diagramme de séquence et diagramme d'activité

=== Documentation, reverse engineering (J5)

=== DSL et profils (J5 suite)


ifdef::slides[:leveloffset: +1]

:numbered!:

[bibliography]
[[refs]]
== Bibliographie

- [[[gram86]]] Ana Gram. Raisonner pour programmer. Dunod, 1986.
- [[[HighsmithFowler2001]]] Jim Highsmith and Martin Fowler. The agile manifesto. Software Development Magazine, 9(8) :29–30, 2001.
- [[[1030005]]] Kieran Conboy and Brian Fitzgerald. Toward a conceptual framework of agile methods : a study of agility in different disciplines. In WISER ’04 : Proceedings of the 2004 ACM workshop on Interdisciplinary software engineering research, pages 37–44, New York, NY, USA, 2004. ACM.
- [[IDM'12]] Ingénierie Dirigée par les Modèles : des concepts a la pratique. Jean-Marc Jézéquel,
Benoît Combemale, Didier Vojtisek. Ellipses 2012.
- [[[Roques2007a]]] Les Cahiers du Programmeur, UML2, {prfc} 3ème Edition, Eyrolles, 2007.
- [[[Roques2007b]]] UML 2 par la pratique, {prfc} 6ème Edition, Eyrolles, 2007.
- [[[Blanc2006]]] UML pour les développeurs, Xavier Blanc, Eyrolles, 2006.
- [[[Longepe2006]]] Le projet d'urbanisation du S.I., C. Longépé, 3ème édition, Dunod, 2006.
- [[[Gillet2008]]] Management des SI, M. & P. Gillet, Dunod, 2008.
- [[[Muller]]] Modélisation objet avec UML. {pam} & Nathalie Gaetner, Eyrolles, 2003.
- [[[RUP]]] http://fr.wikipedia.org/wiki/Unified_Process

include::glossary.txt[]

== About...

****************************************************************
Document réalisé par mailto:{email}[{author}] via  {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
image:{iconsdir}/88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
